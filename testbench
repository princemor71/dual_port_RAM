module testbench;

    // Parameters
    parameter DATA_WIDTH = 8;
    parameter ADDR_WIDTH = 4;
    parameter DEPTH = 1 << ADDR_WIDTH;

    // Inputs
    reg clk;
    reg rst;
    reg [ADDR_WIDTH-1:0] addr_a, addr_b;
    reg [DATA_WIDTH-1:0] data_in_a, data_in_b;
    reg we_a, we_b;

    // Outputs
    wire [DATA_WIDTH-1:0] data_out_a, data_out_b;

    // Instantiate DUT
    dual_port_ram #(
        .DATA_WIDTH(DATA_WIDTH),
        .ADDR_WIDTH(ADDR_WIDTH)
    ) uut (
        .clk(clk),
        .rst(rst),
        .addr_a(addr_a),
        .data_in_a(data_in_a),
        .data_out_a(data_out_a),
        .we_a(we_a),
        .addr_b(addr_b),
        .data_in_b(data_in_b),
        .data_out_b(data_out_b),
        .we_b(we_b)
    );

    // Clock Generation
    initial clk = 0;
    always #3 clk = ~clk;

    // Test Procedure
    initial begin
        $display("Dual-Port RAM Test Started");
        $monitor("Time=%0t | A: addr=%0h in=%0h out=%0h we=%b || B: addr=%0h in=%0h out=%0h we=%b",
                  $time, addr_a, data_in_a, data_out_a, we_a,
                         addr_b, data_in_b, data_out_b, we_b);

        // Reset the system
        rst = 1; we_a = 0; we_b = 0;
        addr_a = 0; addr_b = 0;
        data_in_a = 0; data_in_b = 0;
        #5 rst = 0;


        we_a = 1; addr_a = 4'h3; data_in_a = 8'hAA;#10; 

 
        we_b = 1; addr_b = 4'h5; data_in_b = 8'h55; #10;

        // Read from A and B
        we_a = 0; addr_a = 4'h3;
        we_b = 0; addr_b = 4'h5; #10;

        // Write by Port A
we_a = 1; addr_a = 4'h5; data_in_a = 8'hF0; we_b = 0; #10;

// Then write by Port B
we_b = 1; addr_b = 4'h7; data_in_b = 8'h0F; we_a = 0; #10;


        // Read back from both
        we_a = 0; we_b = 0;
        addr_a = 4'h5; addr_b = 4'h7; #10;

        // Reset again
        rst = 1; #10;
        rst = 0; #10;

        $display("Test Complete.");
        $finish;
    end

endmodule
