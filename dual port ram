    //  DATA_WIDTH = 8,
    //ADDR_WIDTH = 4,
    // DEPTH = 16

module dual_port_ram #(
    parameter DATA_WIDTH = 8,
    parameter ADDR_WIDTH = 4,
    parameter DEPTH = 1 << ADDR_WIDTH
)(
    input clk,
    input rst,  // Reset pin

    // Port A
    input [ADDR_WIDTH-1:0] addr_a,
    input [DATA_WIDTH-1:0] data_in_a,
    output reg [DATA_WIDTH-1:0] data_out_a,
    input we_a,

    // Port B
    input [ADDR_WIDTH-1:0] addr_b,
    input [DATA_WIDTH-1:0] data_in_b,
    output reg [DATA_WIDTH-1:0] data_out_b,
    input we_b
);

    // Memory declaration
    reg [DATA_WIDTH-1:0] mem [0:DEPTH-1];

    // Port A Logic
    always @(posedge clk) begin
        if (rst) begin
            data_out_a <= 0;
        end
      else begin
            if (we_a)
                mem[addr_a] <= data_in_a;
            data_out_a <= mem[addr_a];
        end
    end

    // Port B Logic
    always @(posedge clk) begin
        if (rst) begin
            data_out_b <= 0;
        end 
      else begin
            if (we_b)
                mem[addr_b] <= data_in_b;
            data_out_b <= mem[addr_b];
        end
    end


endmodule
